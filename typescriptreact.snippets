snippet d
/**
 * $1
 */
endsnippet

snippet dd
/** $0 */
endsnippet

snippet try
try {
	$0
} catch (error) {
	console.error(error);
}
endsnippet

snippet c
console.log($0);
endsnippet

snippet m
const $1 = ${2:()} => $0
endsnippet

snippet f
function $1(${2:()}) {
	$0
}
endsnippet

snippet i "" w
() => $0
endsnippet

snippet es
// eslint-disable-next-line
endsnippet

snippet me
module.exports = {
	$0
}
endsnippet

snippet pr
// prettier-ignore
endsnippet

snippet oarg
{...($0 ? { $0 } : {})}
endsnippet

snippet cl "" w
className={styles.$0}
endsnippet

snippet cla "" w
className="$0"
endsnippet

snippet cx
const cx = classnames.bind(styles);
endsnippet

snippet fm
<FormattedMessage id="$0" />
endsnippet

snippet intl "" w
this.props.intl.formatMessage({ id: '$0' })
endsnippet

snippet com
import styles from './$1.module.css';

type Props = {
}

function $1({}: Props) {
	return (
		<div className={styles.wrapper}>
			$0
		</div>
	)
}

export default $1
endsnippet

snippet wrapcom
import styles from './$1.module.css';

type Props = React.PropsWithChildren<{}>;

function $1({ children }: Props) {
	return (
		<div>
			{children}$0
		</div>
	);
}

export default $1
endsnippet

snippet de
describe('$1', () => {
	it('${2:works}', () => {
		const actual = $3;
		expect(actual).toEqual(${4:1})$0;
	});
});
endsnippet
