snippet d
/**
 * $1
 */
endsnippet

snippet dd
/** $0 */
endsnippet

snippet c
console.log($0);
endsnippet

snippet cs
console.log(JSON.stringify($0));
endsnippet

snippet i "" w
() => $0
endsnippet

snippet f
function $1($2) {
	$0
}
endsnippet

snippet es
// eslint-disable-next-line
endsnippet

snippet try
try {
	$0
} catch (error) {
	console.error(error);
}
endsnippet

snippet ra
import * as R from "ramda";
endsnippet

snippet m
const $1 = ${2:()} => $0
endsnippet

snippet e
export const $1 = $0
endsnippet

snippet r
const $1 = require("$1$0");
endsnippet

snippet me
module.exports = {
	$0
}
endsnippet

snippet pr
// prettier-ignore
endsnippet

snippet oarg
{...($0 ? { $0 } : {})}
endsnippet

snippet cl "" w
className={styles.$0}
endsnippet

snippet cx
const cx = classnames.bind(styles);
endsnippet

snippet fm
<FormattedMessage id="$0" />
endsnippet

snippet intl "" w
this.props.intl.formatMessage({ id: "$0" })
endsnippet

snippet com
import React from "react";

import styles from "./$1.module.css";

class $1 extends React.PureComponent {
	static propTypes = {
	};

	static defaultProps = {
	};

	constructor(props) {
		super(props);
		this.state = {
		};
	}

	render() {
		return (
			<div className={styles.wrapper}>
				$0
			</div>
		);
	}
}

export default $1
endsnippet

snippet fcom
import PropTypes from "prop-types";
import React from "react";

import styles from "./$1.module.css";

const $1 = ({ }) => (
	<div className={styles.wrapper}>
		$0
	</div>
);

$1.propTypes = {
};

$1.defaultProps = {
};

export default $1;
endsnippet

snippet hc
import React, {useEffect, useState, useReducer, useMemo} from "react";

import styles from "./$1.module.css";

const $1 = ({}) => {
	return (
		<div className={styles.wrapper}>
			$0
		</div>
	)
};

$1.propTypes = {
};

$1.defaultProps = {
};

export default React.memo($1);
endsnippet

snippet con
constructor() {$0}
endsnippet

snippet pt
$1.propTypes = {
	$2: PropTypes.$3,
};

$1.defaultProps = {
	$2: $0,
};
endsnippet

snippet de
describe("$1", () => {
	it("${2:works}", () => {
		const actual = $0;
		expect(actual).toEqual(1);
	});
});
endsnippet

snippet children
children: PropTypes.oneOfType([
	PropTypes.string,
	PropTypes.node,
	PropTypes.element,
]).isRequired,
endsnippet

snippet pb
$0: PropTypes.bool.isRequired,
endsnippet

snippet pf
$0: PropTypes.func.isRequired,
endsnippet

snippet po
$0: PropTypes.object.isRequired,
endsnippet

snippet pa
$0: PropTypes.array.isRequired,
endsnippet

snippet ps
$0: PropTypes.string.isRequired,
endsnippet

snippet pn
$0: PropTypes.number.isRequired,
endsnippet

snippet pone
$1: PropTypes.oneOfType([$0]).isRequired,
endsnippet

